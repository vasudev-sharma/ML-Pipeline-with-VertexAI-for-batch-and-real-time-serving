name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:  
  lint-format:  
    runs-on: ubuntu-latest

    
    steps:

      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
      - uses: astral-sh/ruff-action@v1

        with:
          python-version: "3.9"


      - name: Install dependencies
        run: |
          pip install ruff bandit mypy black types-PyYAML

      - name: Run Ruff
        run: ruff check . --exit-zero
      
      - name: Run Mypy
        run: mypy . --explicit-package-bases --ignore-missing-imports    # Type-check all Python files

      - name: Run Bandit Security scan 
        run:  bandit -r . -f txt --exit-zero
      
      - name: Run Black
        run: black . --check  # Check all files, no autofix


  unit-test:
    needs: lint-format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
            python-version: '3.9'

    - name: Install dependencies
      run: |
            python -m pip install --upgrade pip
            pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        pytest

    - name: Test code coverage with Pytest
      run: |
        pytest --cov=. tests/ 



  build-and-push-dev-image:
    needs: [lint-format, unit-test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Authenticate
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet


    - name: Build Inference image
      run: |
        docker build -f Dockerfile.production . -t \
        ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:inf

    - name: Push Inference image
      run: |
        docker push \
        ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:inf


    # - name: Build training image
    #   run: |
    #     docker build -f Dockerfile.training . -t \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:train

    # - name: Push training image
    #   run: |
    #     docker push \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:train

    

  build-and-push-inf-image:
    needs: [lint-format, unit-test]
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.PROJECT_ID }}

    - name: Authenticate
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Configure Docker
      run: gcloud auth configure-docker ${{ secrets.REGION }}-docker.pkg.dev --quiet

    - name: Build devlopment image
      run: |
        docker build . -t \
        ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:dev

    - name: Push development image
      run: |
        docker push \
        ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:dev

    # - name: Build production image
    #   run: |
    #     docker build -f Dockerfile.production . -t \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:prod

    # - name: Push production image
    #   run: |
    #     docker push \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:prod


    # - name: Build training image
    #   run: |
    #     docker build -f Dockerfile.training . -t \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:train

    # - name: Push training image
    #   run: |
    #     docker push \
    #     ${{ secrets.REGION }}-docker.pkg.dev/${{ secrets.PROJECT_ID }}/${{ secrets.REPO_NAME }}/${{ secrets.IMAGE_NAME }}:train

    
    
  



